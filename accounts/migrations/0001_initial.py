# Generated by Django 5.2 on 2025-05-16 10:39

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the role",
                        max_length=50,
                        unique=True,
                        verbose_name="role name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the role and its permissions",
                        verbose_name="description",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "role",
                "verbose_name_plural": "roles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("applicant", "Applicant"),
                            ("client", "Client"),
                            ("admin", "Admin"),
                        ],
                        default="client",
                        help_text="User's role in the system",
                        max_length=50,
                        verbose_name="role",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Required. Valid email address for account verification",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Required. 150 characters or fewer",
                        max_length=150,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Enter your legal first name",
                        max_length=30,
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Enter your legal last name",
                        max_length=30,
                        verbose_name="last name",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="GoogleAuthSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        help_text="Google OAuth access token",
                        verbose_name="access token",
                    ),
                ),
                (
                    "refresh_token",
                    models.TextField(
                        blank=True,
                        help_text="Google OAuth refresh token (if available)",
                        null=True,
                        verbose_name="refresh token",
                    ),
                ),
                (
                    "token_expiry",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the access token expires",
                        null=True,
                        verbose_name="token expiry",
                    ),
                ),
                (
                    "google_user_id",
                    models.CharField(
                        help_text="Unique ID from Google",
                        max_length=255,
                        verbose_name="Google user ID",
                    ),
                ),
                (
                    "google_email",
                    models.EmailField(
                        help_text="Email address from Google account",
                        max_length=254,
                        verbose_name="Google email",
                    ),
                ),
                (
                    "profile_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional profile data from Google",
                        verbose_name="profile data",
                    ),
                ),
                (
                    "scopes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="OAuth scopes granted to this session",
                        verbose_name="OAuth scopes",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this session is currently active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this session was last used",
                        verbose_name="last used",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this session was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address used for this session",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Browser/device information",
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="google_auth_sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Google auth session",
                "verbose_name_plural": "Google auth sessions",
                "ordering": ["-last_used"],
            },
        ),
        migrations.CreateModel(
            name="OTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=6)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("attempts", models.IntegerField(default=0)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "metadata",
                    models.TextField(
                        blank=True, help_text="JSON metadata for the OTP", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "OTP",
                "verbose_name_plural": "OTPs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        default="client",
                        help_text="User's role in the system",
                        max_length=50,
                        verbose_name="role",
                    ),
                ),
                (
                    "has_2fa_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether two-factor authentication is enabled for this user",
                        verbose_name="2FA enabled",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Your primary phone number",
                        max_length=15,
                        null=True,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "profile_pic",
                    models.ImageField(
                        blank=True,
                        help_text="Upload a clear profile photo",
                        null=True,
                        upload_to="profile_pics/",
                        verbose_name="profile picture",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Tell others about yourself",
                        null=True,
                        verbose_name="biography",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Your current city/country",
                        max_length=255,
                        null=True,
                        verbose_name="location",
                    ),
                ),
                (
                    "experience",
                    models.TextField(
                        blank=True,
                        help_text="Describe your professional experience",
                        null=True,
                        verbose_name="work experience",
                    ),
                ),
                (
                    "education",
                    models.TextField(
                        blank=True,
                        help_text="List your educational background",
                        null=True,
                        verbose_name="education",
                    ),
                ),
                (
                    "skills",
                    models.TextField(
                        blank=True,
                        help_text="List your key skills (comma separated)",
                        null=True,
                        verbose_name="skills",
                    ),
                ),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Current available balance in account",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="account balance",
                    ),
                ),
                (
                    "manual_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Manually assigned rating (1.0-5.0)",
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="manual rating",
                    ),
                ),
                (
                    "badges",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Earned achievement badges",
                        verbose_name="badges",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="profile created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="last updated"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="The user this profile belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "profile",
                "verbose_name_plural": "profiles",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.CreateModel(
            name="UserActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        help_text="Type of activity performed",
                        max_length=50,
                        verbose_name="activity type",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP address"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="occurred at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "activity log",
                "verbose_name_plural": "activity logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TrustedDevice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        help_text="Unique identifier for the device",
                        max_length=255,
                        verbose_name="device ID",
                    ),
                ),
                (
                    "device_name",
                    models.CharField(
                        help_text="User-friendly name of the device",
                        max_length=255,
                        verbose_name="device name",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        default="unknown",
                        help_text="Type of device (e.g., mobile, desktop)",
                        max_length=50,
                        verbose_name="device type",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address used during verification",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent string from the device",
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this device was last used",
                        verbose_name="last used at",
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this device was verified",
                        verbose_name="verified at",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When the trust for this device expires",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this device is currently trusted",
                        verbose_name="is active",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trusted_devices",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "trusted device",
                "verbose_name_plural": "trusted devices",
                "ordering": ["-last_used_at"],
                "unique_together": {("user", "device_id")},
            },
        ),
    ]

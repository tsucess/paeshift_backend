# Generated by Django 4.2.20 on 2025-05-04 11:51

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("rating", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("jobs", "Job Count"),
                            ("earnings", "Earnings"),
                            ("referrals", "Referrals"),
                            ("streak", "Streak"),
                            ("level", "Level"),
                            ("completion", "Completion"),
                            ("client", "Client Specific"),
                            ("regional", "Regional"),
                            ("holiday", "Holiday Special"),
                        ],
                        default="jobs",
                        max_length=20,
                    ),
                ),
                ("criteria", models.JSONField()),
                ("points", models.PositiveIntegerField()),
                ("is_active", models.BooleanField(default=True)),
                ("is_secret", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("animation", models.CharField(blank=True, max_length=100, null=True)),
                ("is_client_specific", models.BooleanField(default=False)),
                ("is_nigeria_specific", models.BooleanField(default=False)),
                ("region", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                "verbose_name": "Achievement",
                "verbose_name_plural": "Achievements",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                            ("diamond", "Diamond"),
                        ],
                        default="bronze",
                        max_length=10,
                    ),
                ),
                ("image", models.ImageField(upload_to="badges/")),
                ("points", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_secret", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("share_message", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Badge",
                "verbose_name_plural": "Badges",
                "ordering": ["tier", "display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ClientAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("jobs_required", models.PositiveIntegerField(default=1)),
                (
                    "min_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=4.0,
                        max_digits=2,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Client Achievement",
                "verbose_name_plural": "Client Achievements",
            },
        ),
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "leaderboard_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("regional", "Regional"),
                            ("industry", "Industry"),
                            ("all_time", "All Time"),
                        ],
                        default="weekly",
                        max_length=10,
                    ),
                ),
                ("region", models.CharField(blank=True, max_length=50, null=True)),
                ("industry", models.CharField(blank=True, max_length=50, null=True)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Leaderboard",
                "verbose_name_plural": "Leaderboards",
                "ordering": ["-end_date"],
            },
        ),
        migrations.CreateModel(
            name="LevelConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.PositiveIntegerField(unique=True)),
                ("xp_required", models.PositiveIntegerField()),
                ("point_reward", models.PositiveIntegerField(default=0)),
                (
                    "celebration_animation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("dashboard_color", models.CharField(default="#4CAF50", max_length=7)),
            ],
            options={
                "verbose_name": "Level Configuration",
                "verbose_name_plural": "Level Configurations",
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="NigeriaAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("holiday", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "verbose_name": "Nigeria Achievement",
                "verbose_name_plural": "Nigeria Achievements",
            },
        ),
        migrations.CreateModel(
            name="RewardItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("cost", models.PositiveIntegerField()),
                (
                    "reward_type",
                    models.CharField(
                        choices=[
                            ("physical", "Physical"),
                            ("digital", "Digital"),
                            ("service", "Service"),
                            ("discount", "Discount"),
                        ],
                        default="digital",
                        max_length=10,
                    ),
                ),
                ("stock", models.PositiveIntegerField(default=0)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="rewards/"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Reward Item",
                "verbose_name_plural": "Reward Items",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SocialShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("platform", models.CharField(max_length=20)),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
                ("points_earned", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Social Share",
                "verbose_name_plural": "Social Shares",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "invite_code",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
            ],
            options={
                "verbose_name": "Team",
                "verbose_name_plural": "Teams",
            },
        ),
        migrations.CreateModel(
            name="TeamAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unlocked_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "verbose_name": "Team Achievement",
                "verbose_name_plural": "Team Achievements",
            },
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity_type", models.CharField(max_length=50)),
                ("details", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("points_earned", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "User Activity",
                "verbose_name_plural": "User Activities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_points", models.PositiveIntegerField(default=0)),
                ("level", models.PositiveIntegerField(default=1)),
                ("xp_to_next", models.PositiveIntegerField(default=100)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("streak_days", models.PositiveIntegerField(default=0)),
                ("last_streak_update", models.DateField(auto_now_add=True)),
                (
                    "share_code",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("last_level_up", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "User Points",
                "verbose_name_plural": "User Points",
            },
        ),
        migrations.CreateModel(
            name="UserReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "redeemed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("redeemed", "Redeemed"),
                            ("processing", "Processing"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="redeemed",
                        max_length=10,
                    ),
                ),
                ("transaction_id", models.UUIDField(editable=False, unique=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "User Reward",
                "verbose_name_plural": "User Rewards",
                "ordering": ["-redeemed_at"],
            },
        ),
        migrations.AlterModelOptions(
            name="feedback",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Feedback",
                "verbose_name_plural": "Feedbacks",
            },
        ),
        migrations.AlterModelOptions(
            name="review",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Review",
                "verbose_name_plural": "Reviews",
            },
        ),
        migrations.RemoveConstraint(
            model_name="review",
            name="unique_rating",
        ),
        migrations.AddField(
            model_name="feedback",
            name="admin_notes",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="feedback",
            name="category",
            field=models.CharField(
                choices=[
                    ("general", "General"),
                    ("bug", "Bug Report"),
                    ("feature", "Feature Request"),
                    ("ui", "User Interface"),
                    ("other", "Other"),
                ],
                default="general",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="is_resolved",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="review",
            name="is_verified",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="review",
            name="response",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="review",
            name="response_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="feedback",
            name="rating",
            field=models.IntegerField(
                default=5,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="feedback",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedbacks",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="review",
            constraint=models.UniqueConstraint(
                fields=("reviewer", "reviewed"), name="unique_rating_per_user"
            ),
        ),
        migrations.AddField(
            model_name="userreward",
            name="reward",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rating.rewarditem"
            ),
        ),
        migrations.AddField(
            model_name="userreward",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rewards_redeemed",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="userpoints",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="gamification_points",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="useractivity",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="activities",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="teamachievement",
            name="achievement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rating.achievement"
            ),
        ),
        migrations.AddField(
            model_name="teamachievement",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rating.team"
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                related_name="teams", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="achievement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rating.achievement",
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="badge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rating.badge",
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="social_shares",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="nigeriaachievement",
            name="achievement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rating.achievement"
            ),
        ),
        migrations.AddField(
            model_name="levelconfig",
            name="badge_reward",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="rating.badge",
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(
                fields=["leaderboard_type"], name="rating_lead_leaderb_3f812c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(fields=["region"], name="rating_lead_region_8cbfb7_idx"),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(
                fields=["industry"], name="rating_lead_industr_4294f3_idx"
            ),
        ),
        migrations.AddField(
            model_name="clientachievement",
            name="achievement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rating.achievement"
            ),
        ),
        migrations.AddField(
            model_name="achievement",
            name="badge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="rating.badge",
            ),
        ),
        migrations.AddIndex(
            model_name="userpoints",
            index=models.Index(
                fields=["total_points"], name="rating_user_total_p_564c16_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpoints",
            index=models.Index(fields=["level"], name="rating_user_level_3c8841_idx"),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["user", "activity_type"], name="rating_user_user_id_aaf4c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["created_at"], name="rating_user_created_c61cf3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["achievement_type"], name="rating_achi_achieve_20b6f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["is_client_specific"], name="rating_achi_is_clie_4b92d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["is_nigeria_specific"], name="rating_achi_is_nige_ce3704_idx"
            ),
        ),
    ]

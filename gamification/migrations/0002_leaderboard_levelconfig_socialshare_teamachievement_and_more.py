# Generated by Django 4.2.20 on 2025-05-04 12:38

import uuid

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("gamification", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "leaderboard_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("regional", "Regional"),
                            ("industry", "Industry"),
                            ("all_time", "All Time"),
                        ],
                        default="weekly",
                        max_length=10,
                    ),
                ),
                ("region", models.CharField(blank=True, max_length=50, null=True)),
                ("industry", models.CharField(blank=True, max_length=50, null=True)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Leaderboard",
                "verbose_name_plural": "Leaderboards",
                "ordering": ["-end_date"],
            },
        ),
        migrations.CreateModel(
            name="LevelConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.PositiveIntegerField(unique=True)),
                ("xp_required", models.PositiveIntegerField()),
                ("point_reward", models.PositiveIntegerField(default=0)),
                (
                    "celebration_animation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("dashboard_color", models.CharField(default="#4CAF50", max_length=7)),
            ],
            options={
                "verbose_name": "Level Configuration",
                "verbose_name_plural": "Level Configurations",
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="SocialShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("platform", models.CharField(max_length=20)),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
                ("points_earned", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Social Share",
                "verbose_name_plural": "Social Shares",
            },
        ),
        migrations.CreateModel(
            name="TeamAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unlocked_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("progress", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name": "Team Achievement",
                "verbose_name_plural": "Team Achievements",
            },
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity_type", models.CharField(max_length=50)),
                ("details", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("points_earned", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "User Activity",
                "verbose_name_plural": "User Activities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "redeemed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("redeemed", "Redeemed"),
                            ("processing", "Processing"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="redeemed",
                        max_length=10,
                    ),
                ),
                (
                    "transaction_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "User Reward",
                "verbose_name_plural": "User Rewards",
                "ordering": ["-redeemed_at"],
            },
        ),
        migrations.AlterModelOptions(
            name="achievement",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Achievement",
                "verbose_name_plural": "Achievements",
            },
        ),
        migrations.AlterModelOptions(
            name="badge",
            options={
                "ordering": ["tier", "display_order", "name"],
                "verbose_name": "Badge",
                "verbose_name_plural": "Badges",
            },
        ),
        migrations.AlterModelOptions(
            name="rewarditem",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Reward Item",
                "verbose_name_plural": "Reward Items",
            },
        ),
        migrations.RenameField(
            model_name="rewarditem",
            old_name="is_available",
            new_name="is_active",
        ),
        migrations.AddField(
            model_name="achievement",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="achievement",
            name="criteria",
            field=models.JSONField(default={}),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="achievement",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="achievement",
            name="is_client_specific",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="achievement",
            name="is_nigeria_specific",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="achievement",
            name="region",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="badge",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="badge",
            name="display_order",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="badge",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="badge",
            name="is_secret",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="rewarditem",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="rewarditem",
            name="end_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="rewarditem",
            name="start_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="rewarditem",
            name="stock",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="team",
            name="description",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="team",
            name="logo",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="userpoints",
            name="last_level_up",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="userpoints",
            name="last_streak_update",
            field=models.DateField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="userpoints",
            name="last_updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="userpoints",
            name="share_code",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="achievement",
            name="achievement_type",
            field=models.CharField(
                choices=[
                    ("jobs", "Job Count"),
                    ("earnings", "Earnings"),
                    ("referrals", "Referrals"),
                    ("streak", "Streak"),
                    ("level", "Level"),
                    ("completion", "Completion"),
                    ("client", "Client Specific"),
                    ("regional", "Regional"),
                    ("holiday", "Holiday Special"),
                ],
                default="jobs",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="achievement",
            name="points",
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name="badge",
            name="tier",
            field=models.CharField(
                choices=[
                    ("bronze", "Bronze"),
                    ("silver", "Silver"),
                    ("gold", "Gold"),
                    ("platinum", "Platinum"),
                    ("diamond", "Diamond"),
                ],
                default="bronze",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="rewarditem",
            name="reward_type",
            field=models.CharField(
                choices=[
                    ("physical", "Physical"),
                    ("digital", "Digital"),
                    ("service", "Service"),
                    ("discount", "Discount"),
                ],
                default="digital",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="team",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="team",
            name="invite_code",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="userpoints",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="gamification_points",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["achievement_type"], name="gamificatio_achieve_b19cb1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["is_client_specific"], name="gamificatio_is_clie_10a40a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="achievement",
            index=models.Index(
                fields=["is_nigeria_specific"], name="gamificatio_is_nige_cc5370_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpoints",
            index=models.Index(
                fields=["total_points"], name="gamificatio_total_p_b385ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpoints",
            index=models.Index(fields=["level"], name="gamificatio_level_1f6e22_idx"),
        ),
        migrations.AddField(
            model_name="userreward",
            name="reward",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="gamification.rewarditem",
            ),
        ),
        migrations.AddField(
            model_name="userreward",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rewards_redeemed",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="useractivity",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="activities",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="teamachievement",
            name="achievement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="gamification.achievement",
            ),
        ),
        migrations.AddField(
            model_name="teamachievement",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="achievements",
                to="gamification.team",
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="achievement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="gamification.achievement",
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="badge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="gamification.badge",
            ),
        ),
        migrations.AddField(
            model_name="socialshare",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="social_shares",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="levelconfig",
            name="badge_reward",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="gamification.badge",
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(
                fields=["leaderboard_type"], name="gamificatio_leaderb_2cf5e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(fields=["region"], name="gamificatio_region_f18868_idx"),
        ),
        migrations.AddIndex(
            model_name="leaderboard",
            index=models.Index(
                fields=["industry"], name="gamificatio_industr_1f6d43_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["user", "activity_type"], name="gamificatio_user_id_46db3b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["created_at"], name="gamificatio_created_7b12c1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teamachievement",
            unique_together={("team", "achievement")},
        ),
    ]
